View(showMe)
View(showMe)
image(volcano,col = pal(20))
image(volcano,col = p1(20))
swirl()
str(mpg)
qplot(displ,hwy,data = mpg)
qplot(displ,hwy,data = mpg, col = drv)
qplot(displ,hwy,data = mpg, color = drv)
qplot(displ,hwy,data = mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data = mpg,geom = "boxplot")
qplot(drv,hwy,data = mpg,geom = "boxplot",color = manufacturer)
qplot(hwy,data = mpg, fill = drv)
qplot(displ,hwy, data = mpg, .~drv)
qplot(displ,hwy, data = mpg,facets =  .~drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
library(swirl)
swirl()
qplot(displ,hwy, data = mpg, c("point","smooth"),facets = .~drv)
qplot(displ,hwy, data = mpg, geom = c("point","smooth"),facets = .~drv)
g <- ggplot(mpg, aes=c(displ,hwy))
g <- ggplot(mpg, aes(displ,hwy))
g
summary(g)
g + geom_point()
g + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color("pink",size = 4,alpha = 0.5))
g + geom_point(color ="pink",size = 4,alpha = 0.5)
g + geom_point(size = 4,alpha = 0.5,aes(color = drv))
g + geom_point(aes(drv)) + labs(title("Swirl Rules!")) + labs(x="Displacement", y = "Hwy")
g + geom_point(aes(color =drv)) + labs(title("Swirl Rules!")) + labs(x="Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv),size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = 'lm' se = FALSE)
g + geom_point(aes(color = drv),size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = 'lm', se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type = 'l', ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx,y=myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + face_grid(drv~cyl,margins = TRUE)
g + geom_point() + facet_grid(drv~cyl,margins = TRUE)
g + geom_point() + facet_grid(drv~cyl,margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black')
g + geom_point() + facet_grid(drv~cyl,margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black') + labs(x = 'Displacement', y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price,data = diamonds)
library(swirl)
swirl()
qplot(price,data = diamonds,range = diamonds$price)
qplot(price,data = diamonds,range(diamonds$price))
range(diamonds$price)
qplot(price,data = diamonds,range = 18497/30
)
qplot(price,data = diamonds,binwidth = 18497/30
)
brk
counts
qplot(price,data = diamonds,binwidth = 18497/30,fill = cut)
qplot(price , data = diamonds, geom = "density")
qplot(price , data = diamonds, geom = "density", color = cut)
qplot(carat, price data = diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth("lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamods$car2 <- cut(diamods$carat,  cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha(1/3)) + facet_grid(cut~car2)
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method = 'lm', size = 3, color = 'pink')
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(-~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet,BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
library(ggplot2)
?geom
??geom
qplot(votes, rating, data = movies)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
qplot(Wind, Ozone, data = airquality, smooth = 'loess'
)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1,col="blue")
abline(h=1.5,col="blue")
play()
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
nxt()
abline(h = 0.4,col = "red")
5
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
print(hc)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5,col = "blue")
abline(h = 0.4,col = "red")
5
12
abline(h = 0.5, col="green")
dist(dFSM)
dist(dFsm)
hc
heatmap(dataMatrix,col = cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
library(swirl)
swirl()
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5,col= "blue")
abline(h = 0.2,col = "red")
abline(h = 0.4,col = "red")
5
12
abline(h=0.05,col="green")
dFsm
dist(dFsm)
hc
heatmap(dataMatrix,col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col = c("red","orange","purple",pch = 3, cex = 2, lwd = 2))
points(cx,cy,col = c("red","orange","purple"),pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch = 19, cex=2, col = cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
msdist(x,y,newCx,newCy)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch = 10, cex = 2, col = cols1[newClust2])
points(x,y,pch = 19, cex = 2, col = cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col = cols1,pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black","red","green"),pch = 3, cex = 3, lwd = 3)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
library(swirl)
swirl()
mat
svd(mat)
matu%*%t(matv)
matu %*% diag %*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$d
svd2$v[,1:2]
svd$d
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1])%*%svd1$d
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$d)
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$d[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$d[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% svd1$v[,1:2]
a1 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
a1 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
library(swirl)
swirl()
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd,562,563)
?names
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(1:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclust <- hclustering(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering , lab.col = unclass(sub1$activity))
names(sub1[maxCon])
library(swirl)
swirl()
swirl()
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster,sub1$activity)
table(kClust$cluster,sub1$activity,nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12],pch = 19,ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size = 49)
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12],pch = 19, ylab = "walkdown Cluster")
plot(kClust$centers[walkdown,1:12],pch = 19, ylab = "Walkdown Cluster")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,symbol = "|",fixed = TRUE)
cnames <- strsplit(cnames,symbol = '|',fixed = TRUE)
?strsplit
cnames <- strsplit(cnames, '|' , fixed = TRUE)
cnames
play()
wcol
cnames[[1]][wcol]
nxt()
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
pm0$x0 <- Sample.Value
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(xÃŸ)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1)
)
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(pm1$Date)
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code ==36 & county.sie %in% both)
cnt0 <- subset(pm0,State.Code ==36 & county.site %in% both)
cnt1 <- subset(pm1,State.Code ==36 & county.site %in% both)
library(swirl)
swirl()
library(httr)
oauth_endpoints("github")
library(httr)
key <- "7761ca6c1a3b6881407f"
secret <- "16acd176ba8cc0bae165802476e7f12b10ba5549"
myapp <- oauth_app("github",
key = key,
secret = secret)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp = oauth_app("github",key = key, secret = secret)
rm(list = ls())
library(httr)
key <- "7761ca6c1a3b6881407f"
secret <- "16acd176ba8cc0bae165802476e7f12b10ba5549"
library(httr)
key <- "7761ca6c1a3b6881407f"
secret <- "16acd176ba8cc0bae165802476e7f12b10ba5549"
myapp <- oauth_app("github",
key = key,
secret = secret)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
key <- "7761ca6c1a3b6881407f"
secret <- "16acd176ba8cc0bae165802476e7f12b10ba5549"
myapp <- oauth_app("github",
key = key,
secret = secret)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
installed.packages("httpuv")
install.packages("httpuv")
library(httr)
key <- "7761ca6c1a3b6881407f"
secret <- "16acd176ba8cc0bae165802476e7f12b10ba5549"
myapp <- oauth_app("github",
key = key,
secret = secret)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?grep
grep("datasharing",req,value = TRUE)
grep("datasharing",req[1],value = TRUE)
grep("datasharing",req[2],value = TRUE)
grep("datasharing",req[3],value = TRUE)
grep("datasharing",req[4],value = TRUE)
dim(req)
length(req)
for(i in 1:length(req)){
grep("datasharing",req[i],value = TRUE)
}
names(req)
req["url"]
req["date"]
req["time"]
library(data.table)
library(dplyr)
setwd("~/Coursera/DataScience/DataScienceCoursera/03_GettingAndCleaningData")
fileName <- "W4_CourseProject.zip"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists(fileName)){
download.file(fileUrl,fileName)
}
# Read Feature Names + Activities
features <- fread("./UCI HAR Dataset/features.txt",col.names = c("-","featureNames"))
features <- features$featureNames
featureIndex <- grep("mean\\(\\)|std\\(\\)",features)
featureNames <- features[featureIndex]
activities <- fread("./UCI HAR Dataset/activity_labels.txt",col.names = c("Index","Activity"))
# Test Data
test <- fread("./UCI HAR Dataset/test/X_test.txt")[,featureIndex,with = FALSE]
test <- setnames(test,names(test),featureNames)
test_subject <- fread("./UCI HAR Dataset/test/subject_test.txt",col.names = c("SubjectIndex"))
test_activity <- fread("./UCI HAR Dataset/test/y_test.txt",col.names = c("Activity"))
test <- cbind(test_subject,test_activity,test)
# Train Data
train <- fread("./UCI HAR Dataset/train/X_train.txt")[,featureIndex,with = FALSE]
train <- setnames(train,names(train),featureNames)
train_subject <- fread("./UCI HAR Dataset/train/subject_train.txt",col.names = c("SubjectIndex"))
train_activity <- fread("./UCI HAR Dataset/train/y_train.txt",col.names = c("Activity"))
train <- cbind(train_subject,train_activity,train)
dataset <- rbind(train,test)
names(dataset)
dataset[["Activity"]] <- factor(dataset[, Activity], levels = activities[["Index"]], labels = activities[["Activity"]])
dataset[["SubjectIndex"]] <- as.factor(dataset[,SubjectIndex])
mean(dataset$`tBodyAcc-mean()-X`)
grep("t[A-Z]", names(dataset))
grep("t[A-Z]", names(dataset[2:dim(dataset)[2]]))
dim(dataset)
dim(dataset)[2]
2:dim(dataset)[2]
names(dataset[2:dim(dataset)[2]])
names(dataset[,2:dim(dataset)[2]])
tmp <- "tAz"
sub(tmp,"t[A-Z]","time")
tmp
tmp <- gsub(tmp,"t[A-Z]","time")
tmp
tmp <- gsub("t[A-Z]","time",tmp)
tmp
tmp <- "tAz"
tmp <- gsub("t[A-Z]","time",tmp)
tmp
tmp <- "tAz"
grep("t[A-Z]",tmp)
tmp <- astZae
tmp <- "astZae"
grep("t[A-Z]",tmp)
grepl("t[A-Z]",tmp)
tmp
?grep
regexpr("t[A-Z]",tmp)
gregexpr("t[A-Z]",tmp)
gregexpr("t[A-Z]",tmp)[1]
gregexpr("t[A-Z]",tmp)[[1]]
gregexpr("t[A-Z]",tmp)[[1,1]]
gregexpr("t[A-Z]",tmp)[[1]][1]
getMatch <- function(x){x[[1]][2]}
t <- gregexpr("t[A-Z]",tmp)[[1]][1]
getMatch(t)
t
t <- gregexpr("t[A-Z]",tmp)
getMatch(t)
t
t[[1]][2]
t[[1]]
t[[1]][1]
t[[1]][2]
t[[1]][3]
t[[2]][1]
t[[1]]
a <- t[[1]]
a
t <- regexpr("t[A-Z]",tmp)
t
t <- c("eretESser", "seretSehe")
regexpr("t[A-Z]",t)
getMatch <- function(x){x[[1]][1]}
featureNames
matchT <- regexpr("t[A-Z]",featureNames)
matchT
matchT <- getMatch(matchT)
matchT
matchT <- regexpr("t[A-Z]",featureNames)
sapply(matchT,getMatch)
matchT <- sapply(matchT,getMatch)
?sub
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\1", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "hola", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)", "\\U\\1\\L\\1", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\1", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
