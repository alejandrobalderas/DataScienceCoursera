fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit,fit2),coef)
library(swirl)
swirl()
all <- lm(Fertility ~ ., data = swiss)
all
summary(all)
lm(Fertility~agriculture)
lm(Fertility~agriculture, data = swiss)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
View(swiss)
with(swiss,cor(Examination,Education))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec)
efit <- lm(Fertility~.+ec, data = swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sB
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, data = InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit <- lm(count~spray-1, data = swiss)
nfit <- lm(count ~spray-1, data = swiss)
nfit <- lm(count ~spray-1, data = InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(InsectSprays$count ~ spray2)
summary(fit2)
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
data(mtcars )
mpg <- mtcars$mpg
names(mtcars)
cyl <- mtcars$cyl
fit <- lm(mpg ~ cyl)
fit
summary(fit)
fit$coef[2]
fit$coef[2]*4
class(cyl)
cyl <- as.factor(cyl)
cyl
names(mtcars)
wt <- mtcars$wt
class(wt)
fit <- lm(mpg ~ cyl + wt)
fit
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex == "Female"]~ hunger$Year[hunger$Sex == "Female"] )
lmM <- lm(hunger$Numeric[hunger$Sex == "Male"]~ hunger$Year[hunger$Sex == "Male"] )
lmBoth <- lm(Numeric ~ Year  + Sex , hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which = 1)
data("swiss")
fit <- lm(Fertility ~ Agriculture, data = swiss)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
fit <- lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
library(dplyr);
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
fit <- lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
fit
summary(fit)
fit1 <- lm(Fertility~Agriculture*factor(CatholicBin), data = swiss)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
plot(x1, y, type = "n", frame = FALSE)
abline(lm(y ~ x1), lwd = 2)
co.pal <- heat.colors(n)
points(x1, y, pch = 21, col = "black", bg = co.pal[round((n - 1) * x2 + 1)], cex = 2)
par(mfrow=c(2,2))
fit <- lm(Fertility~., data = swiss)
plot(fit)
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
fit <- lm(y~x, out2)
plot(fit, which = 1)
play()
View(out2)
range(X)
range(out2$x)
range(out2$x[-1,])
range(out2$x[-1])
with(plot(x,y))
with(out2,plot(x,y))
plot(out2$x,out2$y)
fit <- lm(y~x, out2)
abline(fit)
fitno <- lm(y~x,out2[-1,])
abline(fitno, col = "red")
fit$coefficients
fitno$coefficients
predict(fit)
resid(fit)
resid(fit)[1]
sum(resid(fit))
plot(fitno, which=1)
which.max(resid(fit))
which.max(resid(fitno))
resid(fitno)
max(redid(fitno))
max(resid(fitno))
resid(fitno[22])
resid(fitno)[22]
resid(fit)[22]
resid(fit)[1]
resid(fit)[13]
nxt(+)
nxt()
fitno <- lm(y~x, out2[-1,])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- deviance(fit)/sqrt(resid(fit))
sigma <- sqrt(deviance(fit))/df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- fit(Fertility~., swiss)
mdl <- lm(Fertility~., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss
)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
pnorm(0.95)
pnorm(sd = 3)
qnorm(p = 0.999)
qnorm(p = 0.998)
qnorm(p = 0.9998)
pnorm(0.9999)
pnorm(0)
qnorm(0.95)
qnorm(0.998)
pnorm(2)
pnorm(3)
pnorm(6)
pnorm(3)^1000
pnorm(3)
pnorm(3,lower.tail = T) - pnorm(-3,lower.tail = T)
pnorm(-3)
1-2*pnorm(-3)
(1-2*pnorm(-3))^1000
(1-2*pnorm(-6))^1000
0.999^1000
qnorm(0.975)
pnorm(2)
pnorm(3)
pnorm(3)-pnorm(-3)
(pnorm(3)-pnorm(-3))^1000
(pnorm(6)-pnorm(-6))^1000
qnorm(0.99)
qnorm(0.999)
qnorm(0.9999)
qnorm(0.99999)
qnorm(0.999999)
qnorm(0.9999999)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
fitModel1 <- train(diagnosis ~ . , data = training.IL, method = "glm")
fitModel2 <- train(diagnosis ~ ., data = training.IL,preProcess = "pca",
method = "glm", trControl = trainControl(preProcOptions = list(thresh = 0.9)))
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testing ), testing$diagnosis)$overall["Accuracy"]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
acc1
acc2
acc2 <- confusionMatrix( predict(fitModel2,testing ), predict(preProc,testing)$diagnosis)$overall["Accuracy"]
acc2
acc2 <- confusionMatrix( predict(fitModel2,predict(preProc,testing)), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,newdata = predict(preProc,testing)), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testPC), testing$diagnosis)$overall["Accuracy"]
fitModel2
name(fitModel2)
names(fitModel2)
fitModel2$coefnames
head(testPC)
fitModel3 <- train(diagnosis ~ ., data = testPC, method = "glm")
dim(testPC)
testPC <- predict(preProc, testing.IL[-1])
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
fitModel1 <- train(diagnosis ~ . , data = training.IL, method = "glm")
fitModel2 <- train(diagnosis ~ ., data = training.IL,preProcess = "pca",
method = "glm", trControl = trainControl(preProcOptions = list(thresh = 0.9)))
testPC <- predict(preProc, testing.IL[-1])
fitModel3 <- train(diagnosis ~ ., data = testPC, method = "glm")
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testPC), testing$diagnosis)$overall["Accuracy"]
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testing ), testing$diagnosis)$overall["Accuracy"]
acc1
acc2
testPC <- predict(preProc, testing[-1])
testPC
testing.IL <- testing[,c(1,covariates)]
testing.preProc <- predict(preProc, testing.IL[-1])
head(testing.preProc)
acc2 <- confusionMatrix( predict(fitModel2,testing.preProc ), testing$diagnosis)$overall["Accuracy"]
args(predict)
names(testPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
testing.IL <- testing[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
testing.preProc <- predict(preProc, testing.IL[-1])
fitModel1 <- train(diagnosis~., data = training.IL, method = "glm")
head(training.preProc)
training.preProc <- cbind(training[,1],training.preProc)
head(training.preProc)
training.preProc <- predict(preProc, training.IL[-1])
training.preProc <- cbind(diagnosis = training[,1],training.preProc)
head(training.preProc)
fitModel2 <- train(diagnosis,training.preProc, method = "glm")
modelFitPC <- train(training$diagnosis, training.preProc, method = "glm")
head(training.preProc)
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
head(training.preProc)
modelFitPC <- train(training$diagnosis, training.preProc, method = "glm")
head(training$diagnosis)
modelFitPC <- train(training$diagnosis ~ .,data = training.preProc, method = "glm")
modelFitPC <- train(training$diagnosis,training.preProc, method = "glm")
modelFit <- train(training.IL$diagnosis, training.IL[-1], method = "glm")
?train
modelFit <- train(training.IL[-1],training.IL$diagnosis, method = "glm")
modelFitPC <- train(training.preProc,training$diagnosis, method = "glm")
testing.preProc <- predict(preProc, testing.IL[-1])
acc1 <- confusionMatrix( predict(modelFit,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(modelFitPC,testing.preProc ), testing$diagnosis)$overall["Accuracy"]
acc1
acc2
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data = vowel.train, method = "rf")
```{r}
library(caret)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data = vowel.train, method = "rf")
fit2 <- train(y~., data = vowel.train, method = "gbm", verbose = F)
pred1 <- predict(fit1, vowel.test)
pred2 <- predict(fit2, vowel.test)
confusionMatrix(vowel.test$y, predict(fit1,vowel.test))$overall[1]
confusionMatrix(vowel.test$y, predict(fit2,vowel.test))$overall[1]
head(pred1)
head(pred2)
tmp <- pred1 == pred2
head(tmp)
predict(fit1, vowel.test[tmp])
a <- predict(fit1, vowel.test[tmp,])
head(a)
dim(a)
length(a)
confusionMatrix(vowel.test$y,a)
confusionMatrix(vowel.test[tmp,y],a)
confusionMatrix(vowel.test[tmp,"y"],a)
confusionMatrix(vowel.test[tmp,"y"],a)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
modelFit.rf <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(62433)
library(tictoc)
tic()
modelFit.rf <- train(diagnosis ~ ., data = training, method = "rf")
modelFit.gbm <- train(diagnosis~.,data = training,method="gbm")
modelFit.lda <- train(diagnosis~., data = training, method = "lda")
toc()
toc()
pred.rf <- predict(modelFit.rf, testing)
pred.gbm <- predict(modelFit.gbm, testing)
pred.lda <- predict(modelFit.lda, testing)
confusionMatrix(testing$diagnosis, pred.rf)$overall[1]
acc.rf <- confusionMatrix(testing$diagnosis, pred.rf)$overall[1]
acc.gbm <- confusionMatrix(testing$diagnosis, pred.gbm)$overall[1]
acc.lda <- confusionMatrix(testing$diagnosis, pred.lda)$overall[1]
acc.rf
acc.gba
acc.gbm
acc.lda
library(ggplot2)
qplot(pred.gbm,pred.rf, color = testing$diagnosis)
head(testing$diagnosis)
predDF <- data.frame(pred.rf,pred.gbm,pred.lda,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rm",data=predDF)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(testing$diagnosis, combPred)$overall[1]
print(acc.rf)
table(acc.rf, acc.gbm)
acc.comb <- confusionMatrix(testing$diagnosis, combPred)$overall[1]
results <- data.frame(acc.rf,acc.gbm, acc.lda, acc.comb)
results
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
dim(training)
head(training)
?plot.enet
??plot.enet
names(training)
modelFit <- train(CompressiveStrength~.,data = concrete, method = "lasso")
modelFit <- train(CompressiveStrength~.,data = concrete, method = "lasso")
modelFit$finalModel
predict(modelFit$finalModel, type = 'coefficients')
names(modelFit$finalModel)
modelFit$finalModel$param
modelFit$finalModel$lambda
?plot.enet
plot(modelFit)
plot(modelFit$finalModel)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
?Quandl
install.packages("quantmod")
library(Quandl)
library(quantmod)
Facebook <- Quandl("WIKI/FB", type = xts)
Facebook <- Quandl("WIKI/FB", type = "xts")
Facebook <- Quandl("WIKI/FB", type = "xts")
Facebook <- Quandl("WIKI/FB", type = "xts")
Quandl("CUR/EUR", start_date = "2013-01-01", end_date = "2013-12-01")
library(Quandl)
library(quantmod)
# Load the Facebook data with the help of Quandl
Facebook <- Quandl("WIKI/FB",type = "xts")
# Plot the chart with the help of candleChart()
candleChart(Facebook)
# Look up the first 3 results for 'Bitcoin' within the Quandl database:
result <- Quandl.search(query = "Bitcoin", page = 3)
str(result)
# Print out the results
# Assign the data set with code BCHAIN/TOTBC
BitCoin <- Quandl("BCHAIN/TOTBC")
# Retrieve all rows for ZACKS/FC for 'AAPL' and 'MSFT'
datatable_all <- Quandl.datatable("ZACKS/FC", ticker = c("AAPL","MSFT"))
# Retrieve all rows for ZACKS/FC for 'AAPL' and 'MSFT'.  Only return the ticker and per_end_date columns
datatable_columns <- Quandl.datatable("ZACKS/FC", ticker = c("AAPL","MSFT"), qopts.columns = c("ticker","per_end_date"))
Quandl("CUR/EUR", start_date = "2013-01-01", end_date = "2013-12-01")
candleChart(Facebook)
setwd("~/Coursera/DataScience/DataScienceCoursera/08_MachineLearning/CourseProject")
library(Quandl)
Quandl.api_key("6gUX2B6CzrcMrboPcVFn")
dt <- Quandl("NSE/OIL", type = "xts")
candleChart(dt)
ktm <- Quandl("SIX/AT0000820659CHF", type = "xts")
candleChart(ktm)
?candleChart
chartSeries(YHOO, subset='last 4 months')
getSymbols("YHOO")
head(ktm)
library(plotly)
plot_ly(ktm)
ktmdf <- data.frame(ktm)
head(ktmdf)
plot_ly(ktmdf)
head(ktm)
names(ktm)
kmt[1,]
ktm[1,]
ktm[,1]
ktm <- Quandl("SIX/AT0000820659CHF")
head(ktm)
plot_ly(Date,Price, data = ktm)
plot_ly(ktm$Date,ktm$Price)
class(ktm)
class(ktm$Date)
ggplot(ktm, aes(Date, Price)) + geom_line()
plot_ly(ktm, x = Date, y = Price)
plot_ly(ktm, x = ktm$Date, y = ktm$Price)
?time
ktm[1,1]
ktm[nrow(ktm),1]
tmp <- time(ktm$Date)
head(tmp)
plot_ly(ktm, x = tmp, y = ktm$Price)
?rep
tmp <- ktm$Date
plot_ly(ktm, x = tmp, y = ktm$Price)
plot_ly(ktm, x = tmp, y = ktm$Price, mode = "lines")
s&p <- Quandl("CME/ESU2018"")
s&p <- Quandl("CME/ESU2018")
sAndp <- Quandl("CME/ESU2018")
head(sAndp)
tmp <- sAndp$Date
plot_ly(x = tmp, y = sAndp$Last, mode = "lines")
head(ktm)
head(sAndp)
sap <- sAndp[,c(1,5)]
head(sap)
names(sap) <- c("time", "Price")
head(sap)
plot_ly(sap, x = time, y = Price, mode = "lines")
plot_ly(sap, x = time, y = Price, mode = "line")
plot_ly(sap, x = time, y = sap$Price, mode = "line")
plot_ly(sap, x = time, y = sap$Price, mode = "lines")
head(time)
plot_ly(sap, x = sap$time, y = sap$Price, mode = "lines")
View(sap)
install.packages("pracma")
