pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
pnorm(0.95)
pnorm(sd = 3)
qnorm(p = 0.999)
qnorm(p = 0.998)
qnorm(p = 0.9998)
pnorm(0.9999)
pnorm(0)
qnorm(0.95)
qnorm(0.998)
pnorm(2)
pnorm(3)
pnorm(6)
pnorm(3)^1000
pnorm(3)
pnorm(3,lower.tail = T) - pnorm(-3,lower.tail = T)
pnorm(-3)
1-2*pnorm(-3)
(1-2*pnorm(-3))^1000
(1-2*pnorm(-6))^1000
0.999^1000
qnorm(0.975)
pnorm(2)
pnorm(3)
pnorm(3)-pnorm(-3)
(pnorm(3)-pnorm(-3))^1000
(pnorm(6)-pnorm(-6))^1000
qnorm(0.99)
qnorm(0.999)
qnorm(0.9999)
qnorm(0.99999)
qnorm(0.999999)
qnorm(0.9999999)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
fitModel1 <- train(diagnosis ~ . , data = training.IL, method = "glm")
fitModel2 <- train(diagnosis ~ ., data = training.IL,preProcess = "pca",
method = "glm", trControl = trainControl(preProcOptions = list(thresh = 0.9)))
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testing ), testing$diagnosis)$overall["Accuracy"]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
acc1
acc2
acc2 <- confusionMatrix( predict(fitModel2,testing ), predict(preProc,testing)$diagnosis)$overall["Accuracy"]
acc2
acc2 <- confusionMatrix( predict(fitModel2,predict(preProc,testing)), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,newdata = predict(preProc,testing)), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testPC), testing$diagnosis)$overall["Accuracy"]
fitModel2
name(fitModel2)
names(fitModel2)
fitModel2$coefnames
head(testPC)
fitModel3 <- train(diagnosis ~ ., data = testPC, method = "glm")
dim(testPC)
testPC <- predict(preProc, testing.IL[-1])
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
fitModel1 <- train(diagnosis ~ . , data = training.IL, method = "glm")
fitModel2 <- train(diagnosis ~ ., data = training.IL,preProcess = "pca",
method = "glm", trControl = trainControl(preProcOptions = list(thresh = 0.9)))
testPC <- predict(preProc, testing.IL[-1])
fitModel3 <- train(diagnosis ~ ., data = testPC, method = "glm")
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testPC), testing$diagnosis)$overall["Accuracy"]
acc1 <- confusionMatrix( predict(fitModel1,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(fitModel2,testing ), testing$diagnosis)$overall["Accuracy"]
acc1
acc2
testPC <- predict(preProc, testing[-1])
testPC
testing.IL <- testing[,c(1,covariates)]
testing.preProc <- predict(preProc, testing.IL[-1])
head(testing.preProc)
acc2 <- confusionMatrix( predict(fitModel2,testing.preProc ), testing$diagnosis)$overall["Accuracy"]
args(predict)
names(testPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
covariates <- grep("^IL", names(training))
training.IL <- training[,c(1,covariates)]
testing.IL <- testing[,c(1,covariates)]
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
testing.preProc <- predict(preProc, testing.IL[-1])
fitModel1 <- train(diagnosis~., data = training.IL, method = "glm")
head(training.preProc)
training.preProc <- cbind(training[,1],training.preProc)
head(training.preProc)
training.preProc <- predict(preProc, training.IL[-1])
training.preProc <- cbind(diagnosis = training[,1],training.preProc)
head(training.preProc)
fitModel2 <- train(diagnosis,training.preProc, method = "glm")
modelFitPC <- train(training$diagnosis, training.preProc, method = "glm")
head(training.preProc)
preProc <- preProcess(training.IL[-1], method = "pca", thresh = 0.8)
training.preProc <- predict(preProc, training.IL[-1])
head(training.preProc)
modelFitPC <- train(training$diagnosis, training.preProc, method = "glm")
head(training$diagnosis)
modelFitPC <- train(training$diagnosis ~ .,data = training.preProc, method = "glm")
modelFitPC <- train(training$diagnosis,training.preProc, method = "glm")
modelFit <- train(training.IL$diagnosis, training.IL[-1], method = "glm")
?train
modelFit <- train(training.IL[-1],training.IL$diagnosis, method = "glm")
modelFitPC <- train(training.preProc,training$diagnosis, method = "glm")
testing.preProc <- predict(preProc, testing.IL[-1])
acc1 <- confusionMatrix( predict(modelFit,testing ), testing$diagnosis)$overall["Accuracy"]
acc2 <- confusionMatrix( predict(modelFitPC,testing.preProc ), testing$diagnosis)$overall["Accuracy"]
acc1
acc2
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data = vowel.train, method = "rf")
```{r}
library(caret)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data = vowel.train, method = "rf")
fit2 <- train(y~., data = vowel.train, method = "gbm", verbose = F)
pred1 <- predict(fit1, vowel.test)
pred2 <- predict(fit2, vowel.test)
confusionMatrix(vowel.test$y, predict(fit1,vowel.test))$overall[1]
confusionMatrix(vowel.test$y, predict(fit2,vowel.test))$overall[1]
head(pred1)
head(pred2)
tmp <- pred1 == pred2
head(tmp)
predict(fit1, vowel.test[tmp])
a <- predict(fit1, vowel.test[tmp,])
head(a)
dim(a)
length(a)
confusionMatrix(vowel.test$y,a)
confusionMatrix(vowel.test[tmp,y],a)
confusionMatrix(vowel.test[tmp,"y"],a)
confusionMatrix(vowel.test[tmp,"y"],a)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
modelFit.rf <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(62433)
library(tictoc)
tic()
modelFit.rf <- train(diagnosis ~ ., data = training, method = "rf")
modelFit.gbm <- train(diagnosis~.,data = training,method="gbm")
modelFit.lda <- train(diagnosis~., data = training, method = "lda")
toc()
toc()
pred.rf <- predict(modelFit.rf, testing)
pred.gbm <- predict(modelFit.gbm, testing)
pred.lda <- predict(modelFit.lda, testing)
confusionMatrix(testing$diagnosis, pred.rf)$overall[1]
acc.rf <- confusionMatrix(testing$diagnosis, pred.rf)$overall[1]
acc.gbm <- confusionMatrix(testing$diagnosis, pred.gbm)$overall[1]
acc.lda <- confusionMatrix(testing$diagnosis, pred.lda)$overall[1]
acc.rf
acc.gba
acc.gbm
acc.lda
library(ggplot2)
qplot(pred.gbm,pred.rf, color = testing$diagnosis)
head(testing$diagnosis)
predDF <- data.frame(pred.rf,pred.gbm,pred.lda,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rm",data=predDF)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(testing$diagnosis, combPred)$overall[1]
print(acc.rf)
table(acc.rf, acc.gbm)
acc.comb <- confusionMatrix(testing$diagnosis, combPred)$overall[1]
results <- data.frame(acc.rf,acc.gbm, acc.lda, acc.comb)
results
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
dim(training)
head(training)
?plot.enet
??plot.enet
names(training)
modelFit <- train(CompressiveStrength~.,data = concrete, method = "lasso")
modelFit <- train(CompressiveStrength~.,data = concrete, method = "lasso")
modelFit$finalModel
predict(modelFit$finalModel, type = 'coefficients')
names(modelFit$finalModel)
modelFit$finalModel$param
modelFit$finalModel$lambda
?plot.enet
plot(modelFit)
plot(modelFit$finalModel)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
?Quandl
install.packages("quantmod")
library(Quandl)
library(quantmod)
Facebook <- Quandl("WIKI/FB", type = xts)
Facebook <- Quandl("WIKI/FB", type = "xts")
Facebook <- Quandl("WIKI/FB", type = "xts")
Facebook <- Quandl("WIKI/FB", type = "xts")
Quandl("CUR/EUR", start_date = "2013-01-01", end_date = "2013-12-01")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M)
plot(M)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
??geocode
library(ggmap)
supplier_city <- c("monterrey","guadalajara", "mexico city", "san luis potosi",
"ciudad obregon", "puebla", "saltillo", "ciudad juarez")
supplier_city <- paste0(supplier_city,", mexico")
supplier_city_coords <- geocode(supplier_city, force = TRUE)
supplier_city_coords <- geocode(supplier_city, force = TRUE)
supplier_city_coords <- geocode(supplier_city, force = TRUE)
supplier_city
supplier_city_coords
dt <- supplier_city_coords[-3,]
dt
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
dt %>%
leaflet() %>%
addTiles() %>%
addMarkers()
bmwFizCoord <- data.frame(lon = 11.571350, lat =48.193843)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers()
?setView
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers() %>%
setView(zoom = 12)
bmwFizCoord %>%
leaflet(, zoom = 11) %>%
addTiles() %>%
addMarkers() %>%
bmwFizCoord %>%
leaflet(, zoom = 11) %>%
addTiles() %>%
addMarkers()
bmwFizCoord %>%
leaflet(, zoom = 11) %>%
addTiles() %>%
addMarkers()
bmwFizCoord %>%
leaflet(, zoom = 11) %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ")
bmwFizCoord %>%
leaflet(zoom = 11) %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ")
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ")
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
center(zoom = 12)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord, zoom = 4)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lat,bmwFizCoord$lon, zoom = 4)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lon,bmwFizCoord$lat, zoom = 4)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lon,bmwFizCoord$lat, zoom = 12)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lon,bmwFizCoord$lat, zoom = 10)
bmwFizCoord %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lon,bmwFizCoord$lat, zoom = 9)
bmwcoord <- geocode("
Knorrstraße 147
80788 München
Germany
")
bmwcoord <- geocode("Knorrstraße 147 80788 München, Germany")
bmwcoord <- geocode("Knorrstraße 147 80788 München, Germany", force = T)
bmwcoord <- geocode("Knorrstrasse 147 80788 München, Germany", force = T)
bmwcoord <- geocode("München, Germany", force = T)
supplier_city_coords <- geocode(supplier_city, force = TRUE)
ad <- "Sierra mijes 205 monterrey mexico"
c <- geocode(ad, force = TRUE)
c
c %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ") %>%
setView(bmwFizCoord$lon,bmwFizCoord$lat, zoom = 9)
c %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = "BMW FIZ")
bmwcoord <- geocode("Munich, Germany", force = T)
ad <- "Sierra mijes 205 monterrey mexico"
c <- geocode(ad, force = TRUE)
shiny::runApp('DataScience/DataScienceCoursera/09_DevelopingDataProducts/courseraTestApp')
runApp('DataScience/DataScienceCoursera/09_DevelopingDataProducts/courseraTestApp')
runApp('DataScience/DataScienceCoursera/09_DevelopingDataProducts/courseraTestApp')
setwd("~/Coursera/DataScience/DataScienceCoursera/09_DevelopingDataProducts/courseraTestApp")
setwd("~/Coursera/DataScience/DataScienceCoursera/09_DevelopingDataProducts")
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
library(shiny)
library(leaflet)
library(ggmap)
ctry <- "Germany"
geoLoc <- geocode(ctry)
?geocode
geoLoc <- geocode(ctry, source = "dsk")
geoLoc
point2Locate <- "Monterrey, Mexico"
geoLoc <- geocode(point2Locate, source = "dsk")
geoLoc
?eventReactive
geoLoc
geoLoc %>% leaflet() %>% addMarkers()
leaflet()%>%
addTiles()%>%
addMarkers(data = geoLoc())
geoLoc %>% leaflet() %>% addTiles() %>% addMarkers()
geoLoc %>% leaflet() %>% addTiles() %>% addMarkers() %>% setView(geoLoc$lon, geoLoc$lat, zoom = 10)
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
point2Locate <- "Germany"
coords <- geocode(point2Locate, source = "dsk")
coords
coords_text <- paste("Lon: ",coords$lon, " Lat: ", coords$lat)
coords_text
lon <- coords$lon
lon
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
bmwFizCoord <- data.frame(lon = 11.571350, lat =48.193843)
library(leaflet)
bmwFizCoord %>% leaflet() %>% addTiles()
bmwFizCoord %>% leaflet() %>% addTiles() %>% addMarkers()
bmwFizCoord %>% leaflet() %>% addTiles() %>% addMarkers()
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
library(ggmap)
?geocode
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
geocodeQueryCheck()
runApp('shinyLeafletMap')
tmp <- geocode("Germany")
tmp
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='alejandrobalderas',
token='03A96A448D4AE734A28AB758E195E677',
secret='Vn1+QBj3HXdC5TqJ/SJygn/Ur2qKHVbxojVlhIbn')
shiny::runApp('shinyLeafletMap')
runApp('shinyLeafletMap')
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
head(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers")
?plot_ly
plot_ly(data = mtcars, x = wt, y = mpg, mode = "markers")
knitr::opts_chunk$set(echo = FALSE)
plot_ly(x = mtcars$wt,y = mtcars$mpg, mode = "markers")
plot_ly(data = mtcars, x = ~wt, y = ~mpg, mode = "markers")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
fitLM <- lm(mpg ~ hp, data = mtcars)
plot_ly(mtcars$hp, mtcars$mpg)
plot_ly(x = mtcars$wt,y = mtcars$mpg, mode = "markers")
plot_ly(x = mtcars$wt,y = mtcars$mpg, mode = "scatter")
plot_ly(x = mtcars$wt,y = mtcars$mpg, mode = "markers")
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers")%>%
add_lines(x = mtcars$hp, y = predict(fitLM,mtcars$hp))
p <- predict(fitLM, mtcars$hp)
p <- predict(fitLM, newdata = mtcars$hp)
head(mtcars$hp)
p <- predict(fitLM, newdata = data.frame(hp = mtcars$hp))
p
predict(fitLM)
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers")%>%
add_lines(x = mtcars$hp, y = predict(fitLM))
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers", add_lines(y = predict(fitLM)))
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers")%>%
add_lines(x = mtcars$hp, y = predict(fitLM, newdata = data.frame(hp = mtcars$hp)))
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers")%>%
add_trace(x = mtcars$hp, y = predict(fitLM, newdata = data.frame(hp = mtcars$hp)))
plot_ly(x = mtcars$hp,y = mtcars$mpg, method = "markers")%>%
add_trace(x = mtcars$hp, y = predict(fitLM, newdata = data.frame(hp = mtcars$hp), mode = "line"))
plot_ly(mtcars) %>%
add_trace(x = ~hp, y = ~mpg, type = "scatter", mode = "points")
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg)
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg, text = rownames(mtcars), showlegend = F)
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg, text = rownames(mtcars), showlegend = F) %>%
add_lines(y = ~fitted(lm(mpg~hp)))
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg, text = rownames(mtcars), showlegend = F) %>%
add_lines(y = ~fitted(lm(mpg~hp)), name = "Linear Modell", showlegend = TRUE)
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg, text = rownames(mtcars), showlegend = F) %>%
add_lines(y = ~fitted(lm(mpg~hp)), name = "Linear Modell", showlegend = TRUE) %>%
layout(xaxis= list(title="Horse Power"),
yaxis= list(title="Miles per Gallon"),
legend = list(x = 0.8, y = 0.9))
?layout
plot_ly(mtcars, x = ~hp) %>%
add_markers(y = ~mpg, text = rownames(mtcars), showlegend = F) %>%
add_lines(y = ~fitted(lm(mpg~hp)), name = "Linear Modell", showlegend = TRUE) %>%
layout(xaxis= list(title="Horse Power"),
yaxis= list(title="Miles per Gallon"),
legend = list(x = 0.8, y = 0.9),
title = "Title")
